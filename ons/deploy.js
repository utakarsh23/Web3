const ethers = require("ethers");
const fs = require("fs");
require("dotenv").config();
const rpc_url = process.env.RPC_URL;
const password = process.env.PASSWORD;

async function main() {
    const provider = new ethers.JsonRpcProvider(rpc_url)
    //contract provider network on which the contract is being deployed


    const encryptedJson = fs.readFileSync("./encryptedWallet.json", "utf8");

    let wallet = await ethers.Wallet.fromEncryptedJsonSync(encryptedJson, password);
    //walled private key for signing off contracts, and give permissions to perform operations, we've encrypted it for security
    //refer encryptedKeys.js

    wallet = await wallet.connect(provider);


    const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8"); //abi after compilation of the contract
    const binary = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.bin", "utf8"); //binary after compilation of the contract
    //yarn solcjs --bin --abi --include-path node_modules/ --base-path . -o . SimpleStorage.sol
    //make sure that we have the same version of solc compiler as the solidity version of compiler.(same side)


    // const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
    // // creation of the contract
    //
    //
    // console.log("Deploying pliss wait");
    // const contract = await contractFactory.deploy(); //waiting till deployment completion
    // // console.log(contract) //the contract
    //
    // const transactionReceipt = await contract.deploymentTransaction().wait(1);
    //the deployed transaction..
    // console.log("deployed successfully")
    // console.log("here's the deployed transaction");
    // console.log(contract.deploymentTransaction);
    //
    // console.log("here's the transaction receipt");
    // console.log(transactionReceipt);

    // //let's deploy with only txn data
    // console.log("let's deploy with only txn data");
    // const nonce = await wallet.getNonce();
    // const tx = {
    //     gasPrice : "20000000000",
    //     gasLimit : "6721975",
    //     nonce : nonce,
    //     to : null,
    //     value : 0,
    //     data : "0x608060405234801561001057600080fd5b506109ae806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639e7a13ad1161005b5780639e7a13ad146100d8578063bae9c9a814610109578063c04a0f4514610127578063d52daa98146101435761007d565b80632e64cec1146100825780636057361d146100a05780636f760f41146100bc575b600080fd5b61008a610173565b6040516100979190610325565b60405180910390f35b6100ba60048036038101906100b59190610380565b61017c565b005b6100d660048036038101906100d191906104f3565b61018f565b005b6100f260048036038101906100ed9190610380565b6101f5565b6040516101009291906105ce565b60405180910390f35b6101116102b1565b60405161011e9190610325565b60405180910390f35b610141600480360381019061013c91906104f3565b6102b7565b005b61015d600480360381019061015891906105fe565b6102de565b60405161016a9190610325565b60405180910390f35b60008054905090565b8060008190555061018b610173565b5050565b600260405180604001604052808381526020018481525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190816101ee9190610853565b5050505050565b6002818154811061020557600080fd5b906000526020600020906002020160009150905080600001549080600101805461022e90610676565b80601f016020809104026020016040519081016040528092919081815260200182805461025a90610676565b80156102a75780601f1061027c576101008083540402835291602001916102a7565b820191906000526020600020905b81548152906001019060200180831161028a57829003601f168201915b5050505050905082565b60005481565b806001836040516102c89190610961565b9081526020016040518091039020819055505050565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000819050919050565b61031f8161030c565b82525050565b600060208201905061033a6000830184610316565b92915050565b6000604051905090565b600080fd5b600080fd5b61035d8161030c565b811461036857600080fd5b50565b60008135905061037a81610354565b92915050565b6000602082840312156103965761039561034a565b5b60006103a48482850161036b565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610400826103b7565b810181811067ffffffffffffffff8211171561041f5761041e6103c8565b5b80604052505050565b6000610432610340565b905061043e82826103f7565b919050565b600067ffffffffffffffff82111561045e5761045d6103c8565b5b610467826103b7565b9050602081019050919050565b82818337600083830152505050565b600061049661049184610443565b610428565b9050828152602081018484840111156104b2576104b16103b2565b5b6104bd848285610474565b509392505050565b600082601f8301126104da576104d96103ad565b5b81356104ea848260208601610483565b91505092915050565b6000806040838503121561050a5761050961034a565b5b600083013567ffffffffffffffff8111156105285761052761034f565b5b610534858286016104c5565b92505060206105458582860161036b565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561058957808201518184015260208101905061056e565b60008484015250505050565b60006105a08261054f565b6105aa818561055a565b93506105ba81856020860161056b565b6105c3816103b7565b840191505092915050565b60006040820190506105e36000830185610316565b81810360208301526105f58184610595565b90509392505050565b6000602082840312156106145761061361034a565b5b600082013567ffffffffffffffff8111156106325761063161034f565b5b61063e848285016104c5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061068e57607f821691505b6020821081036106a1576106a0610647565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026107097fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826106cc565b61071386836106cc565b95508019841693508086168417925050509392505050565b6000819050919050565b600061075061074b6107468461030c565b61072b565b61030c565b9050919050565b6000819050919050565b61076a83610735565b61077e61077682610757565b8484546106d9565b825550505050565b600090565b610793610786565b61079e818484610761565b505050565b5b818110156107c2576107b760008261078b565b6001810190506107a4565b5050565b601f821115610807576107d8816106a7565b6107e1846106bc565b810160208510156107f0578190505b6108046107fc856106bc565b8301826107a3565b50505b505050565b600082821c905092915050565b600061082a6000198460080261080c565b1980831691505092915050565b60006108438383610819565b9150826002028217905092915050565b61085c8261054f565b67ffffffffffffffff811115610875576108746103c8565b5b61087f8254610676565b61088a8282856107c6565b600060209050601f8311600181146108bd57600084156108ab578287015190505b6108b58582610837565b86555061091d565b601f1984166108cb866106a7565b60005b828110156108f3578489015182556001820191506020850194506020810190506108ce565b86831015610910578489015161090c601f891682610819565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b600061093b8261054f565b6109458185610925565b935061095581856020860161056b565b80840191505092915050565b600061096d8284610930565b91508190509291505056fea2646970667358221220ebc96fdeadf067b5d88be1d617bfbdc3f42d7c691426f14f3fdfb3cc6573456264736f6c63430008130033"
    //     // chainId : "1337n",
    // }
    // //this is a tx'n with all the details propagated,, but this isn't signed, these are just the details
    //
    // // signing and sending a tx'n
    // // const signedTxResponse = await wallet.signTransaction(tx);
    // // console.log(signedTxResponse);
    //
    // const sendTxResponse = await wallet.sendTransaction(tx); //this automatically signs a txn(ctrl click)
    // // internal code
    // /*  async sendTransaction(tx: TransactionRequest): Promise<TransactionResponse> {
    //     const provider = checkProvider(this, "sendTransaction");
    //
    //     const pop = await this.populateTransaction(tx);
    //     delete pop.from;
    //     const txObj = Transaction.from(pop);
    //     return await provider.broadcastTransaction(await this.signTransaction(txObj));
    // }*/
    //
    //
    // await sendTxResponse.wait(1);
    // console.log(sendTxResponse);
    //as per now we have only hard coded the data


    //-------------------interacting with contracts in etherjs


    const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
    // creation of the contract

    console.log("Deploying pliss wait");
    const contract = await contractFactory.deploy(); //deploying

    await contract.deploymentTransaction().wait(1); //waiting a block

    const address = await contract.getAddress();
    console.log(`Contract Address ${address}`)

    const currentFavNo = await contract.retrieve(); //response with BigNumber
    console.log(`Current fav no ${currentFavNo.toString()}`); //so to print we have to convert it to String


    const transactionResponse = await contract.store("8"); //calling the store function in the solidity(refer SimpleStorage.sol for reference
    const transactionReceipt = await transactionResponse.wait(1);
    const updatedFavNo = await contract.retrieve(); //calling the retrieve to get it again
    console.log(`Updated fav no ${updatedFavNo.toString()}`);

}

main().then(() => process.exit(0)).catch((err) => {
    console.error(err);
    process.exit(1);
})